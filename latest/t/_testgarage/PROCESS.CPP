
#include"process.h"
/////////////////////提示灯/////////////////////////////////
void lamp()
{  int i,j;
    int c=50;
    for(j=0;j<3;j++)
    {  
        for(i=0;i<9;i++)
    {
		BPlot(8+j*105,139-i*11,c);
    }
   
        for(i=0;i<5;i++)
    {
        BPlot(64+j*105,117-i*11,c);
    }
    
        for(i=0;i<7;i++)
    {
       BPlot(103+j*105,117-i*11,c);
    }
    
        for(i=0;i<4;i++)
    {
		BPlot(39+i*11+j*105,27,c);
	}
	}
}
void c_lamp(Pp* p,int a) /////////////控制车位灯的函数
{
	int i,j,k;
    int c=78;
	for(i=0;i<3;i++)
	{
	   for(j=0;j<4;j++)
   {	if(j==0)
       {	for(k=0;k<9;k++)
			{
				if(p->a[i][j][k]==a)
				{
					BPlot(8+i*105,139-k*11,c);
				}
			}
			
   }
       if(j==1)
       {
		for(k=0;k<5;k++)
		{
			if(p->a[i][j][k]==a)
			{
				BPlot(64+i*105,117-k*11,c);
			}
		}
       }
		if(j==3)
        {
		for(k=0;k<7;k++)
		{
			if(p->a[i][j][k]==a)
			{
				 BPlot(103+i*105,51+k*11,c);
			 }
		}
        }
		if(j==2)
        {
		for(k=0;k<4;k++)
		{
			if(p->a[i][j][k]==a)
			{
				BPlot(39+k*11+i*105,27,c);
            }
		}
		
		}
	}
	}


}
////////////////////显示屏显示函数/////////////////////////
void Load_LED(int x,int y,char *s,int state,int color)
{
    switch(state)
    {
        case 0:  WriteHz16s(s,x,y,color);            // 打印汉字
                 break;
        case 1:  Blit_String(x,y,color,s,1);         // 打印西文
                 break;
    }
}

////////////////////////显示屏擦除函数////////////////////////////////
void wipeout(int x,int y,int state)
{
    switch(state)
    {
        case 0:
               fill_Rectangle(x,y,x+18,y+14,0);
               break;
        case 1:
               fill_Rectangle(x,y,x+159,y+20,0);
               break;

    }

}
//////////////////////////////将数字转化为字符串////////////////////////////////////
char* transform(int n)
{
    char m1,m2;
    char *s;
    m1=n/10+'0';
    m2=n%10+'0';
    s[0]=m1;
    s[1]=m2;
    s[2]='\0';
    return s;

}

void base2(int n,Car *cr) ////////////////////////////////显示屏显示第二屏
{
	char *s;
	char m;
    int h;
	switch(n)
    {
        case 0:
               s="车位：";                  //系统模式
               Load_LED(150,178,s,0,140);
               s=transform(cr->i+1);
               Load_LED(192,185,s,1,79);
			   s="-";
               Load_LED(208,185,s,1,79);
               Load_LED(231,185,s,1,79);
               s=transform(cr->j+1);
               Load_LED(215,185,s,1,79);
               s=transform(cr->k+1);
               Load_LED(238,185,s,1,79);
               break;
		case 1:s="请选择指示灯为绿色的";
               Load_LED(150,178,s,0,140);
               Delay(15);
               wipeout(150,178,1);
               s="车位";
               Load_LED(150,178,s,0,140);
               wipeout(150,178,1);
               s="-";
               Load_LED(213,185,s,1,79);
               Load_LED(236,185,s,1,79);
               s="层数：";
               Load_LED(150,178,s,0,140);
               m=bioskey(0);
               h=m-'0';
               cr->i=h-1;
               wipeout(150,178,1);
               s="-";
               Load_LED(213,185,s,1,79);
               Load_LED(236,185,s,1,79);
               s=transform(cr->i+1);
               Load_LED(194,185,s,1,79);
               s="区域：";
               Load_LED(150,178,s,0,140);
               m=bioskey(0);
               h=m-'0';
               cr->j=h-1;
               wipeout(150,178,1);
               s="-";
               Load_LED(213,185,s,1,79);
               Load_LED(236,185,s,1,79);
               s=transform(cr->i+1);
               Load_LED(194,185,s,1,79);
               s=transform(cr->j+1);
               Load_LED(217,185,s,1,79);
               s="号码：";
               Load_LED(150,178,s,0,140);
               m=bioskey(0);
               h=m-'0';
               cr->k=h-1;
               wipeout(150,178,1);
               delay(2);
               s="车位：";
               Load_LED(150,178,s,0,140);
               s=transform(cr->k+1);
               Load_LED(239,185,s,1,79);
               s="-";
               Load_LED(213,185,s,1,79);
               Load_LED(236,185,s,1,79);
               s=transform(cr->i+1);
               Load_LED(194,185,s,1,79);
               s=transform(cr->j+1);
               Load_LED(217,185,s,1,79);
    }
}

void base1(Pp *state,Car *cr)     ////////////////////显示屏第一屏/////////////////////////
{
  char *s1,*s2,*s3,*s4,*s5,*s;
  int m;
  s1="floor 1:  floor 2:";
  s2="floor 3:" ;
  s3="系统设定：";
  s4="自定义：";
  //s3="再来一次";
//  s4="返回主页";
  s5="空车位";
  	while(!kbhit())
  {                                                      //获取空余车位并显示
  attain(state);
  Load_LED(199,178,s5,0,123);
  Delay(20);
  wipeout(150,178,1);
  Load_LED(150,178,s1,1,140);//紫色
  Load_LED(150,187,s2,1,140);
  s=transform(state->f1);
  Load_LED(211,178,s,1,123);
  s=transform(state->f2);
  Load_LED(293,178,s,1,123);
  s=transform(state->f3);
  Load_LED(211,187,s,1,123);//绿色
  Delay(20);
  wipeout(150,178,1);
  }
  m=bioskey(0);
  Load_LED(150,178,s3,0,63);
  Load_LED(235,178,s4,0,63);
  s="F1";
  Load_LED(220,185,s,1,63);
  s="F2";
  Load_LED(288,185,s,1,63);
  m=bioskey(0);
   if(m==F1) 
  {
    
   // printf("%d",state->a[0][0][2]);
    assign(state,cr);      //系统安排车位
    //printf("%d%d%d",cr->i,cr->j,cr->k);
    wipeout(150,178,1);
  // PCX_Load_Screen("in.pcx",1);
    base2(0,cr);
  }                   
  if(m==F2)            //自定义模式返回1
  {
       wipeout(150,178,1);
       base2(1,cr);
  }

}
/*int base3()                    ///////////////////////显示屏第三屏////////////////////////
{
	char*s,m;
	wipeout(150,178,1);
	s="返回：";
	Load_LED(150,178,s,0,63);         //黄色
	s="Esc";
	Load_LED(189,185,s,1,63);
	s="再来一次：";
	Load_LED(218,178,s,0,63);
	s="F3";
	Load_LED(290,185,s,1,63);
	m=bioskey(0);
	if(m==F3) return 1;
} */
void arrow(Arrow p)     //////////////////控制引导函数////////////////
{
    int c=50;
    int x=p->x,y=p->y;
switch(p->des)
    {
        case 0:
               fill_Rectangle(x,y,x+12,y+12,0);
        case 1:line(x+1,y+6,x+6,y+1,c);
               line(x+6,y+1,x+11,y+6,c);
               line(x+1,y+9,x+6,y+4,c);
               line(x+6,y+4,x+11,y+9,c);
               break;
        case 2:line(x+3,y+1,x+8,y+6,c);
               line(x+3,y+11,x+8,y+6,c);
               line(x+6,y+1,x+11,y+6,c);
               line(x+6,y+11,x+11,y+6,c);
               break;
        case 3:line(x+1,y+6,x+6,y+1,c);
               line(x+1,y+6,x+6,y+11,c);
               line(x+4,y+6,x+9,y+1,c);
               line(x+4,y+6,x+9,y+11,c);
               break;
        case 4:line(x+1,y+3,x+6,y+6,c);
               line(x+6,y+6,x+11,y+1,c);
               line(x+1,y+6,x+6,y+11,c);
               line(x+6,y+11,x+11,y+6,c);
               break;       
    }

}
void Draw_Arrow(int x,int y,int m)     //////////////////控制引导函数////////////////
{
    int c=2;
    setcolor(c);
    
switch(m)
    {
        
        case 0:line(x+1,y+6,x+6,y+1);
               line(x+1,y+6,x+6,y+11);
               line(x+4,y+6,x+9,y+1);
               line(x+4,y+6,x+9,y+11);
               break;        
        case 1:line(x+1,y+6,x+6,y+1);               
               line(x+6,y+1,x+11,y+6);
               line(x+1,y+9,x+6,y+4);
               line(x+6,y+4,x+11,y+9);
               break;
        case 2:line(x+3,y+1,x+8,y+6);
               line(x+3,y+11,x+8,y+6);
               line(x+6,y+1,x+11,y+6);
               line(x+6,y+11,x+11,y+6);
               break;
       
        case 3:line(x+1,y+1,x+6,y+6);
               line(x+6,y+6,x+11,y+1);
               line(x+1,y+6,x+6,y+11);
               line(x+6,y+11,x+11,y+6);
               break;    
      
    }

}



///////////////小车结构初始化//////////////
void init_car(Car* p)
{   
    int m,n;
    p->i=0;
    p->j=0;
    p->k=0;                       //停车位初始化
    p->time=0;
    for(m=0;m<7;m++)
    { for(n=0;n<2;n++)
		 p->road[m][n]=0;
                                            //路径初始化

    }
}

void init_pp(Pp * p)                                //初始化车库
{   
    int x,i,j,k;
    
    p->f1=0;
    p->f2=0;
    p->f3=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<4;j++)
        {
            for(k=0;k<9;k++)
            {   
               
                x=random(2);
				if((j==0&&k<9)||(j==1&&k<5)||(j==2&&k<4)||(j==3&&k<7))p->a[i][j][k]=x;
                else 
                {
				   p->a[i][j][k]=1;
                }
            }
        }
    }

}
/////////////////////初始化引导系统/////////////////////////
void init_arrow(Arrow p)
{
    int i;
    for(i=0;i<3;i++)
    {   
        p[i*5].y=149;
        p[i*5].x=31+i*105;
        p[i*5+2].y=51;
        p[i*5+2].x=29;
        p[i*5+3].y=51;
        p[i*5+3].x=68;
        p[i*5+1].y=93;
        p[i*5+1].x=29;
        p[i*5+4].y=93;
        p[i*5+4].x=68;
    }
    for(i=0;i<15;i++)
    {
        p[i].des=0;
    }

    


}




///////////////////////进度条动画//////////////////////////////


void login()
{
    PCX_Load_Screen("s1.pcx",1);
     Delay(14);
     PCX_Load_Screen("s2.pcx",1);
}
void introduction()
{
   PCX_Load_Screen("in.pcx",1);
   getch();
   PCX_Load_Screen("pstr.pcx",1);
   return;
}

void portfunc()
{
    BUTTON a[3];
    BUTTON button_go={350,120,507,147,"进入"};
    BUTTON button_back={350,150,507,175,"返回"};
    BUTTON button_help={400,180,517,195,"详情"};
    a[0]=button_go;
    a[1]=button_back;
    a[2]=button_help;
    sprite small;
    mou curmouse,oldmouse;
 //    char s1[2],s2[2],s3[2],s4[2],s5[2];
    login();
//     s1[0]=n/10+'0';
  //  s2[0]=n%10+'0';
    //s3[0]='/';
   // s4[0]=7+'0';
    //s5[0]=8+'0';
     Delay(16);
     mouse_all(&curmouse,&oldmouse,&small);
     back("pstr.pcx",&small);
	 while(1)
	 {
	   move_mouse(& curmouse,& oldmouse,& small);
        if(curmouse.key)
        {
            if(mouse_on(a))
            {
               test();
            }
           
            else if(mouse_on(a+1))
            {
                //jiemian_homepage();
            }
              else if(mouse_on(a+2))
		   {
               introduction();
		
		   }  
             

        }
     }
   // Blit_String(X,Y,10,s1,1);
//	Blit_String(X+A,Y,10,s2,1);
//	Blit_String(X+2*A,Y,10,s3,1);
//	Blit_String(X+3*A,Y,10,s4,1);
//	Blit_String(X+4*A,Y,10,s5,1);
    
}




///////////////////////////获取车库空余车位//////////////////////////////////////////////
void attain(Pp * p)
{   
    p->a_park=0;
    p->f1=0;
    p->f2=0;
    p->f3=0;
    int i,j,k;
    for(i=0;i<3;i++)
    {
        for(j=0;j<4;j++)
        {
            for(k=0;k<9;k++)
            {
                if(p->a[i][j][k]!=1)
                {
                    p->a_park+=1;
					switch(i)
                    { case 0:    p->f1+=1;break;
                      case 1:    p->f2+=1;break;
                      case 2:    p->f3+=1;break;
                    }             
                }
            }
        }
    }

}


///////////////车位分配函数//////////////
void assign(Pp * s,Car * p)
{   
  //  printf("%d\n",a[0][0][0]);
	int i,j,k;
	for(i=0;i<3;i++)
	{
		for(j=0;j<4;j++)
		{
			for(k=0;k<9;k++)
			 {
				if((s->a[i][j][k]==0))
					 {
					  (s->a[i][j][k])=2;//车位被分配后的状态
					   p->i=i;
					   p->j=j;         //车结构中关于车位安排
					   p->k=k;
                       return;
					 }
				
				 }
				 
		}
    }
}

//小车拿到分配车位

////////////////制定小车路线/////////////////////
void road_design(Car *p)
{
	int h,l;
	h=p->k;
	p->road[0][0]=INIT_X;                    //第一个拐点坐标
	p->road[0][1]=INIT_Y;
    if(p->i==0)
    {
        switch(p->j)                         //判断区位
    {
        case 0: p->road[1][0]=INIT_X;          //M为第一个车位纵坐标，N为车位宽度.第一区
                p->road[1][1]=M-h*N;
                p->road[2][0]=0;
                p->road[2][1]=0;
                break;
        
        case 1: p->road[1][0]=INIT_X;          //第二区   
                p->road[1][1]=INIT_Y-P-h*N;
                p->road[2][0]=0;
                p->road[2][1]=0;
                break;

        case 2: p->road[1][0]=INIT_X;         //第三区       
                p->road[1][1]=H;
                p->road[2][0]=INIT_X+F+N*h;
                p->road[2][1]=H;
                p->road[3][0]=0;
                p->road[3][1]=0;
                break;
		case 3:                     //第四区
                p->road[1][0]=INIT_X;         //第三区       
                p->road[1][1]=H;  
                p->road[2][0]=L;
                p->road[2][1]=H;
                p->road[3][0]=L;
				p->road[3][1]=H+h*N+S;
                p->road[4][0]=0;
                p->road[4][1]=0;
                break;
               
			     
     }
    }
    else if(p->i==1)
    {
        switch(p->j)                         //判断区位
    {
        case 0: p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G;
                p->road[3][1]=M-h*N;
                p->road[4][0]=0;
                p->road[4][1]=0;
                break;
        
        case 1: p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G;          //第二区   
                p->road[3][1]=INIT_Y-P-h*N;
                p->road[4][0]=0;
                p->road[4][1]=0;
                break;

        case 2: p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G;         //第三区       
                p->road[3][1]=H;
                p->road[4][0]=INIT_X+F+N*h+G;
                p->road[4][1]=H;
                p->road[5][0]=0;
                p->road[5][1]=0;
                break;
		case 3:                     //第四区
                p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G;               
                p->road[3][1]=H;  
                p->road[4][0]=L+G;
                p->road[4][1]=H;
                p->road[5][0]=L+G;
				p->road[5][1]=H+h*N+S;
                p->road[6][0]=0;
                p->road[6][1]=0;
                break;
               
			     
     }
    }

        else if(p->i==2)
    {
        switch(p->j)                         //判断区位
    {
        case 0: p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G+V;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G+V;
                p->road[3][1]=M-h*N;
                p->road[4][0]=0;
                p->road[4][1]=0;
                break;
        
        case 1: p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G+V;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G+V;          //第二区   
                p->road[3][1]=INIT_Y-P-h*N;
                p->road[4][0]=0;
                p->road[4][1]=0;
                break;

        case 2: p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G+V;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G+V;         //第三区       
                p->road[3][1]=H;
                p->road[4][0]=INIT_X+F+N*h+G+V;
                p->road[4][1]=H;
                p->road[5][0]=0;
                p->road[5][1]=0;
                break;
		case 3:                     //第四区
                p->road[1][0]=INIT_X;        
                p->road[1][1]=D;             //上斜坡的纵坐标
                p->road[2][0]=INIT_X+G+V;     //G斜坡长度
                p->road[2][1]=D;
                p->road[3][0]=INIT_X+G+V;            
                p->road[3][1]=H;  
                p->road[4][0]=L+G+V;
                p->road[4][1]=H;
                p->road[5][0]=L+G+V;
				p->road[5][1]=H+h*N+S;
                p->road[6][0]=0;
                p->road[6][1]=0;
                break;
               
			     
     }
    }
}
//////////////过程函数//////////////////              */




















/////////////////////小车停车事件函数/////////////////////////
void car(Pp *state,sprite*ob,Car * p,int *j,int * pro)
{
 int index,m,m1,m2,m3,m4,o;
 char *s,l;
 //*j=0;
 //o=(p->i)*105;
m=bioskey(0);
 if(m==F2)
     { 
         Erase_Sprite(ob);
         ob->curr_frame=1;
         Behind_Sprite(ob);
	     Draw_Sprite(ob);   //画小车
	     delay(SPEED);
    }
 else if(m==F4)
      { 
         Erase_Sprite(ob);
         ob->curr_frame=3;
         Behind_Sprite(ob);
	     Draw_Sprite(ob);   //画小车
	     delay(SPEED);
    }
 else if(m==F1) { 
         Erase_Sprite(ob);
         ob->curr_frame=0;
         Behind_Sprite(ob);
	     Draw_Sprite(ob);   //画小车
	     delay(SPEED);
    }
 else if(m==F3) { 
         Erase_Sprite(ob);
         ob->curr_frame=2;
         Behind_Sprite(ob);
	     Draw_Sprite(ob);   //画小车
	     delay(SPEED);
    }
 else if(m==DOWN)
 {
      Erase_Sprite(ob);
	  ob->y++;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);

 }
 else if(m==UP)
 {
      Erase_Sprite(ob);
	  ob->y--;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);

 }
 else if(m==LEFT)
 {
      Erase_Sprite(ob);
	  ob->x--;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);

 }
  else if(m==RIGHT)
 {
      Erase_Sprite(ob);
	  ob->x++;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);

 }

/*   if((sprite->x==p->road[0][0])&&(sprite->y==p->road[0][1]))
 {
	
	 wipeout(150,178,1);
	 s="取卡";
	 Load_LED(165,178,s,0,59);
	s="y or n ?";
	 Load_LED(200,185,s,1,59);
	 l=bioskey(0);
	 if((l-'y')==0)
	 {   
         wipeout(150,178,1);
		 
		 
	 }
 */

 /*
 if(p->road[*pro][0]!=0&&p->road[*pro][1]!=0)
 {
	 if(p->road[*pro][0]<ob->x)
	{
	  Erase_Sprite(ob);
	  ob->x--;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);
	 }
	else if ((p->road[*pro][0]==ob->x)&&(p->road[*pro][1]==ob->y))
	 {
	  Erase_Sprite(ob);
	  if((p->j==0&&p->road[*pro+1][0]==0)||(p->j==3&&p->road[*pro+1][0]==0)||(p->j==2&&p->road[*pro+1][0]==0)||((p->i==1||p->i==2)&&*pro==2))
	  {ob->curr_frame=(ob->curr_frame-1)%4;}//帧数变化.左
	  else{
		  ob->curr_frame=(ob->curr_frame+1)%4;//右
	 }
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);
	  (*pro)++;
	 }
	else if(p->road[*pro][1]>ob->y)
	 {
	  Erase_Sprite(ob);
	  ob->y++;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);
	 }
	else if(p->road[*pro][0]>ob->x)
	{
	  Erase_Sprite(ob);
	  ob->x++;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);
	 }
	 else if(p->road[*pro][1]<ob->y)
	 {
	  Erase_Sprite(ob);
	  ob->y--;
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);
	 }
	 *j=2;
   }


 m1=((ob->x>(9+o))&&(ob->x<(30+o))&&(ob->y>20)&&(ob->y<170));
 m2=((ob->y>50)&&(ob->y<140)&&(ob->x>20+o)&&(ob->x<46+o));
 m3=((ob->x>46+o)&&(ob->x<86+o)&&(ob->y>40)&&(ob->y<150));
 m4=((ob->y>28)&&(ob->y<48)&&(ob->x>0+p->i*70)&&(ob->x<80+o));
 m=m1||m2||m4||m3;
 if(m&&p->road[*pro][0]==0&&p->road[*pro][1]==0)              ///////停进车位
 {
	 switch(p->j)
	 {
		case 0: Erase_Sprite(ob);
				ob->x--;
				Behind_Sprite(ob);
				Draw_Sprite(ob);
				delay(SPEED+2);
				break;

		 case 1:Erase_Sprite(ob);
				ob->x++;
				Behind_Sprite(ob);
				Draw_Sprite(ob);
				delay(SPEED+2);
				break;

		 case 2:Erase_Sprite(ob);
			   ob->y--;
			   Behind_Sprite(ob);
			   Draw_Sprite(ob);
			   delay(SPEED+2);
			   break;
		 case 3:Erase_Sprite(ob);
			   ob->x++;
			   Behind_Sprite(ob);
			   Draw_Sprite(ob);
			   delay(SPEED+2);
			   break;
	 }
 }
 else if(*j!=2)
   {   Sprite_Delete(ob);
	   state->a[p->i][p->j][p->k]=1;
	   *j=1;

 }
 */
 
}
//////////////////////引导小车事件函数//////////////////////////////
void judge_ar(sprite *ob,Car *p)
{
 if(p->road[ob->pro][0]!=0&&p->road[ob->pro][1]!=0)
 {
	 if(p->road[ob->pro][0]<ob->x)
	{
	 wipeout(150,178,1);
	 Draw_Arrow(150,178,0);
	 }


   //  到达结点
/*	else if ((p->road[*pro][0]==ob->x)&&(p->road[*pro][1]==ob->y))
	 {

	  if((p->j==0&&p->road[*pro+1][0]==0)||(p->j==3&&p->road[*pro+1][0]==0)||(p->j==2&&p->road[*pro+1][0]==0)||((p->i==1||p->i==2)&&*pro==2))
	  {ob->curr_frame=(ob->curr_frame-1)%4;}//帧数变化.左
	  else{
		  ob->curr_frame=(ob->curr_frame+1)%4;//右
	 }
	  Behind_Sprite(ob);
	  Draw_Sprite(ob);   //画小车
	  delay(SPEED);
	  (*pro)++;
	 }

*/
	else if(p->road[ob->pro][1]>ob->y)
	 {
		  wipeout(150,178,1);
		  Draw_Arrow(150,178,3);

	 }
	else if(p->road[ob->pro][0]>ob->x)
	{
		 wipeout(150,178,1);
		 Draw_Arrow(150,178,2);
	 }
	 else if(p->road[ob->pro][1]<ob->y)
	 {
		  wipeout(150,178,1);
		  Draw_Arrow(150,178,1);
	 }
   }

}




////////////////////////////停车动画/////////////////////////////////////////
void build_sprite(sprite * spo,Car * cr)
{ int index=0;
  pcx_picture objects_pcx;
  //  pcx_picture o1,o2,o3,o4,o5;
  PCX_Init((pcx_picture_ptr)&objects_pcx);
  PCX_Load("boo.pcx",(pcx_picture_ptr)&objects_pcx,1);
  Sprite_Init(&spo[0],OX,INIT_Y,0,0,0,0);
  for(index=0;index<4;index++)
	{
	 PCX_Grab_Bitmap((pcx_picture_ptr)&objects_pcx,&spo[0],index,index,0);
	}
  PCX_Delete((pcx_picture_ptr)&objects_pcx);

  Behind_Sprite(spo);
}

void pull_over(Pp *state,Car * cr,sprite * spo,Arrow ar)
{
   

  //s5=state->a_park;
  char *s2,*s3,*s4,*s5;    
  int s;int j,m=0;
  char *s1;
  build_sprite(spo,cr);
  wipeout(150,178,1);
  while(1)
	  {
		  
           
           attain(state);
           if(m!=state->a_park)
           {
               m=state->a_park;
              wipeout(5,167,0);
	          s1=transform(m);
	          Load_LED(8,172,s1,1,50);
           }
		  car(state,spo,cr,&j,&(spo->pro));
          c_lamp(state,1);
          delay(2);
		
        
                                                           //引导板块


          if(j==1) 
          {     attain(state);
           if(m!=state->a_park)
           {
               m=state->a_park;                    //操作板块
              wipeout(5,167,0);
	          s1=transform(m);
	          Load_LED(8,172,s1,1,50);
           }
          
              break;}
      }
  
// if( !base3())  return;
  //getch();
   //}
}








void test(void)                             //尝试小车转弯
{
  Set_Video_Mode(VGA256);
  int index,m=0,i,j,k;
  randomize();
  Arrow ar;
  Pp state;
  sprite spo;
  Car cr;
 

  //num=random(10)+1;

  //保存头指针
/////////////// 进入加载过程的（动画）/// 显示空余车位/////////////////////////////////////////////////////////
       init_pp(&state); //初始化车库
       init_car(&cr);
	   init_arrow(ar);
       PCX_Load_Screen("garage.pcx",1);
       lamp();
	   c_lamp(&state,1);
   // while(1) 
   //{   
    
       
       wipeout(150,178,1);
	   base1(&state,&cr);
	   road_design(&cr);
                                        
 // login();


  /////////////////////////单弄个函数：背景列表格把车位，车牌号什么的展示出来，以及空车位和已停车位/////////////////////////////////////////////////////////
  


  
pull_over(&state,&cr,&spo,ar);//  一层停车动画

 getch();

}

////////////////////////有待实现的功能：指示灯有问题。3.时间显示。5.边栏的停车状态表示表格。。6.引导箭头///////////////////

